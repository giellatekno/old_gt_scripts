#!/usr/bin/perl
use strict;
use utf8;

# These definitions ensure that the script works 
# also in environments, where PERL_UNICODE is not set.
binmode( STDIN, ':utf8' );
binmode( STDOUT, ':utf8' );
binmode( STDERR, ':utf8' );
use open 'utf8';

# preprocess
# Perl-script for text preprocessing 
#  - Cuts text into sentences and sentences into words (tokens).
#  - Reads plain text from STDIN and outputs 
#    a list of words separated by newline.
#
# An abbreviation file may be given as input parameter --abbr, 
# the file has special syntax and the usage is connected 
# to other sámi tools.
# 
# $Id$

# permit named arguments
use Getopt::Long;

my @words;
my %abbrs;
my %corrections;
my %corr_short;
my $TRAB="TRAB";
my $ITRAB="ITRAB";
my $TRNUMAB="TRNUMAB";
my $IDIOM="IDIOM";

# Max size of a multi-word expression.
my $MULTIWORD_SIZE = 3;

my $abbr_file;
my $help=0;
my $verbose=0;
my $hyph=0;
my $use_hyph_tag=0;
my $fst;
my $corr;
my $sentence_break=".";
my $xml;
my $line;
my $next_line;
my %connecting;
my $connect;

GetOptions ("abbr=s" => \$abbr_file,
			"fst=s" => \$fst,
			"corr=s" => \$corr,
			"break=s" => \$sentence_break,
			"xml" => \$xml,
			"connect=s" => \$connect,
			"help" => \$help,
			"v" => \$verbose,

			"hyph" => \$hyph,
			"use-hyph-tag" => \$use_hyph_tag) ;

if ($help) {
	&print_usage;
	exit;}

if ($connect) {
	for my $w ( split(",", $connect)){ $connecting{$w} = 1; }
}

my $quotations = quotemeta("«»‹›“”„‘’‚´`'\"");
my $other = quotemeta("…•¶½¾¼"); # dash to be added
my $parentheses = quotemeta("|{}[]()<>");
if ($xml) { $parentheses = quotemeta("|{}[]()"); }
my $general_punct = quotemeta("$.*?!,;:.%");

# Punctuation marks that are always their own tokens,
# whether word or numeral expression.
# There are characters added to this list depending on if
# the processed string is word or numeral.
my $SINGLE_PUNCT = $quotations . $parentheses . quotemeta("?!,;/\\") . $other;

# Regex for tokens that nevertheless contain punctuation that
# is specified in variable $SINGLE_PUNCT.
my $CONTAIN_PUNCT = 'ja\/dahje|http|:\/\/|km\/h|www|@|\.jpg|\.doc|\.pdf|\.html|\.txt|¹|²|³|™';
if ($xml) { $CONTAIN_PUNCT .= "|<.*>"; }

# Punctuation that connects two or more numerals 
# into one numeral expressions.
my $NUM_PUNCT=quotemeta("-+*=/≈·");

my %idioms;
my %idioms_short;
my %num;
# If the abbreviation file is given,
# read the abbreviations from the file to a hash.
if ($abbr_file) {
	&read_abbr (\%abbrs, \%idioms, \%idioms_short, \%num);
}
# Read the corrections file (typos.txt)
if ($corr) {
	&read_corr (\%corrections, \%corr_short);
}

sub verbose {
	my ($from, $word, $linenumber) = @_;
	
	if (!$verbose) {
		return;
	}
	
	print STDERR "[$from:$linenumber] $word\n";
}

# Read one line at a time but keep track on the next line.

my @next_words;
my @words;

while (<>) {
	chomp;

	if (/^\s*$/ && !eof) { next; }
	s/^\s*//;
	
	# Process the <hyph> tag.
	if (! $use_hyph_tag) {
		if ($hyph) { s/\<hyph\>/-/g; }
		else { s/\<hyph\>//g; }
	}

	# Process always the previous line, unless first line.
	if(!$line && ! @words) { 
		$line = $_;
		if (!eof) { next; }
		else { $next_line = undef; }
	}
	elsif(eof) { $next_line = undef; }
	else { $next_line = $_; }

	# If no XML-processing, split line to tokens.
	if(! $xml) {
		if (! @words) { @words = split (/\s+/, $line); $line = undef; }
		@next_words = split (/\s+/, $next_line);
		$next_line = undef;
	}
	else {
		# If the xml-tags are included in the preprocessor output they are 
		# left untouched and just added to the tokens array.
		# The xml-markup without space, like in <italics>word</italics>
		# is taken into account.
		
		if (!@words) { xml_tags($line, \@words); }
		xml_tags($next_line, \@next_words)
		} 
	
	process_words();
	@words = @next_words;

}

process_words();

sub xml_tags {
	my ($line, $aref) = @_;

	@$aref = undef;
	pop @$aref;

	while ($line) {
		verbose("processing xml-tag", $line , __LINE__);	
		if ($line =~ s/^\s*([^<\s]*?)\s+//) { push (@$aref, $1); next; }
		elsif ($line =~ s/^(.*?)\s*(<[^<]*?>)\s*//) { 
			if ($1) { push (@$aref, $1); } 
			push (@$aref, $2); 
			next; 
		}
		else { 
			push (@$aref, split(/\s+/, $line));
			last; 
		}
	}
}

sub process_words {
	
	while (@words) {
		
		my $word = shift @words;
		
		verbose("NEW", $word , __LINE__);
		# An array for storing the tokens, each token in its own slot.
		my @tokens;

		# Leave xml-tags untouched.
		if($xml && $word =~ /^<.*>$/) { print "$word\n"; next; }
		
		# Move forward if the word is nothing special. 
        # This is for making preprocessing faster.
		if ($word =~ /^[^\W\d\s\n]*$/) {
			if((! $corr || ! $corr_short{$word}) && ! $idioms_short{$word}) {
				verbose("no correction, no idiom", $word , __LINE__);
				print "$word\n";
				next;
			}
		}
		# Process "word1- og word2" strings.
		if ($word =~ /\w+\p{Pd}$/) {
			if (@words) {
				if ($connecting{$words[0]}) {
					$word .= " " . shift @words;
					verbose("connecting", $word , __LINE__);
					if ($words[0]) { $word .= " " . shift @words; }
					elsif (@next_words) { $word .= " " . shift @next_words; }
				}
			}
			elsif(@next_words) {
				verbose("connecting", $word , __LINE__);
				if ($connecting{$next_words[0]} && $next_words[1]) {
					$word .= " " . shift @next_words;
					$word .= " " . shift @next_words;
				}
			}
		}
		PROCESS_WORD: {
			# Fix some punctuation, like ...voxende and ----whatelse
			if ($word =~ /^(.*?)((:?\.){3,}|(:?\-){3,})(.*)$/) {
				my $first_word = $1;
				my $middle_punct = $2;
				my $second_word = $5;
				if ($first_word) {
					if ($first_word =~ /^[\W]?[^\W\d]+/) { 
						verbose("if word with dots", $first_word , __LINE__);
						process_word ($first_word, \@words, \@tokens);
					} else {
						verbose("if numeral with dots", $first_word , __LINE__);
						process_numeral ($first_word, \@words, \@tokens);
					}
				}
				push (@tokens, substr($middle_punct, 0, 3));
				if ($second_word) {
					if ($second_word =~ /^[\W]?[^\W\d]+/) { 
						verbose("if word with dots", $second_word , __LINE__);
						process_word ($second_word, \@words, \@tokens);
					} else {
						verbose("if numeral with dots", $second_word , __LINE__);
					process_numeral ($second_word, \@words, \@tokens);
					}
				}
				last PROCESS_WORD;
			}

			# store punctuation from the front of the expression
			# to the tokens array. (todo: check variable $CONTAIN_PUNCT)
			if ($word =~ s/^([$SINGLE_PUNCT\.]+)//o) {
				verbose("if front punct ", $word , __LINE__);
				push (@tokens, split(//, $1));
			}
			# Examine the type of the string. If the expression contains
			# alphabetical characters optionally preceded by one punctuation
			# character, it is a word.
			if ($word =~ /^[\W]?\pL+/) {
				verbose("if word", $word , __LINE__);
				process_word ($word, \@words, \@tokens);
			}
			# Otherwise it is processed like numeral.
			else {
				process_numeral ($word, \@words, \@tokens);
			}
		} # end of PROCESS_WORD

		for my $token (@tokens) {
			print "$token\n" unless ($token =~ /^$/);
		}
	}
}


sub process_word {
	my ($word, $words_aref, $tokens_aref) = @_;

	# variable for storing all the punctuation at the end of the word.
	# except dot (for abbreviations) and some other punct. if needed
	my $end_punct;
	# the variable storing dot and the possible some other punct.
	my $rest_punct;

	# Correct the word, if corrections is defined
	if ($corr ) { if ($corr_short{$word}) { test_corr(\$word, $words_aref, $tokens_aref); }}

    # Test for multiword expression.
	if ( $idioms_short{$word}) { test_idiom(\$word, $words_aref, $MULTIWORD_SIZE); }

    my $end_num;
    if ($word =~ /\.?(\d+\.?)$/){
        $word =~ s/(\d+\.?)$//;
        $end_num = $1;
        verbose ("process_word/end_num", $end_num, __LINE__);
    }

    # Store the punctuation at the front of the string to tokens array.
	if ($word =~ s/^([*+=%:\p{Pd}$other]+)//o) {
		push (@{$tokens_aref}, split(//, $1));
		verbose ("process_word/front_punct", $1, __LINE__);
	}

    # Store the punctuation at the end of the string to a variable
	if ($word =~ s/([+=%:$SINGLE_PUNCT\§]+)$//o) {
		$end_punct = $1;
		verbose ("process_word/end_punct", $end_punct, __LINE__);
	}

  TEST: {
	  # If the punctuation at the end contains a sentence delimiter
	  # ? or !, the word ends the sentence in any case, so the word can
	  # be treated as a token.
	  if ($end_punct =~ /[¶\?\!\.]/) {
		  if($corr) { if ($corr_short{$word}) { test_corr(\$word, $words_aref, $tokens_aref); } }
		  push (@{$tokens_aref}, $word);
		  last TEST;
	  }

	  # The word is checked for abbreviation and sentence boundary.
	  my $abbr = $word;
	  if ($abbr =~ s/\.$//) {
		  if ($abbrs{$abbr} || $abbrs{lc($abbr)}) {
			  verbose ("process_word/go_to_test_abbr", $abbr, __LINE__);
			  test_abbr($word, $words_aref->[0], $tokens_aref);
			  last TEST;
		  }	  
		  # Check for abbreviation with 2-3 capital letters
		  # If followed by a capital letter or number,
		  # There is a sentence boundary. todo: Remove this as irrelevant!!
		  elsif ($abbr =~ /^[\p{Lu}]{2,3}$/o ) {
			  if ($words_aref->[0] !~ /^[\p{Ll}]/o ) {
				  if($corr) { if ($corrections{$word}) { test_corr(\$word, $words_aref, $tokens_aref); } }
				  push (@{$tokens_aref}, $abbr);
				  push (@{$tokens_aref}, ".");
				  last TEST;
			  }
			  else {
				  push (@{$tokens_aref}, $word); 
				  last TEST;
			  }
		  }
	  }
	  # Cut the word into tokens if there is punctuation in the middle.
	  # e.g. gielddat/guovllut
	  # Check for expressions in $CONTAIN_PUNCT -variable.
	  verbose ("process_word/not_abbr", "$word", __LINE__);
	  if ($word =~ /^(\pL+\.)([\p{pD}\pL]+.*)$/ || $word =~ /([\pL\p{Pd}]+)([^\pL \:\-\`]+[\p{pD}\pL]+.*)$/) {
		  if ($word !~ /$CONTAIN_PUNCT/o) {
			  $word = $1;
			  unshift(@$words_aref, $2);
			  process_word($1, $words_aref, $tokens_aref);
			  verbose ("process_word/contain_punct", "$word", __LINE__);
			  return 1;
		  }
	  }
	  # If the word was not an abbreviation, the rest
	  # of the punctuation is removed and stored as separate tokens.
	  # This operation is for taking the dot out.
	  if ($word =~ s/([$SINGLE_PUNCT\.:]+)$//o) {
		  $rest_punct =  $1;
		  verbose ("process_word/rest_punct", "$word $rest_punct", __LINE__);
		  if($corr) { if ($corrections{$word}) {test_corr(\$word, $words_aref, $tokens_aref); } }
		  push (@{$tokens_aref}, $word);
		  my @rest = split ("", $rest_punct);
		  push (@{$tokens_aref}, @rest);
		  last TEST;
	  }
	  push (@{$tokens_aref}, $word); 
	  
  } # end of block TEST
	
	push (@{$tokens_aref}, $end_num); 
	push (@{$tokens_aref}, split(//, $end_punct));
}


sub test_abbr {
	my ($word, $next_word, $tokens_aref) = @_;

	my $abbr = $word;
	if (! ($abbr =~ s/\.$//)) {
		return 0;
	}

	# Transitive abbreviations are never followed
	# by sentence boundary.
	if ($abbrs{$abbr} eq $TRAB || $abbrs{lc($abbr)} eq $TRAB) {

		push (@{$tokens_aref}, $word);
		return 1;
	}
	# There is CLB after TRNUMAB only for the capital+small combinations
	# and all small-initial strings that consist of more than one letter.
	# For all other strings (one small letter, one or several capital letters, number) we
	# want no CLB after TRNUMAB.
	elsif ($abbrs{$abbr} eq $TRNUMAB || $abbrs{lc($abbr)} eq $TRNUMAB) {
		push (@{$tokens_aref}, $word);
		if ($next_word =~ /^\p{Lu}/ && $next_word !~ /^(\p{Lu}|[IVXCDLM]+)$/o) {
			push (@{$tokens_aref}, $sentence_break);
		}
		return 1;
	}
	# There is a sentence boundary if intransitive abbreviation 
	# is NOT followed by a small alphabetic char or punctuation.
	elsif ($abbrs{$abbr} eq $ITRAB || $abbrs{lc($abbr)} eq $ITRAB) {
		push (@{$tokens_aref}, $word);
		if ($next_word !~ /^[\p{Ll}\pP]/o) {
			push (@{$tokens_aref}, $sentence_break);
		}
		return 1;
	}

	return 0;
}

# If a word is in the typos-list, it is replaced by the correct reading.

sub test_corr {
	my ($word_ref, $words_aref, $tokens_aref) = @_;

	my $size=2;
	my $i=0;

	# If the word is single part.
	if (my $correct = $corrections{$$word_ref}) { 
		my @parts = split (/ /o, $correct);
		if (scalar @parts > 1) {
			if ( $idioms{$correct}) { 
				$$word_ref = $correct; 
				verbose ("test_corr/split_words", "$correct", __LINE__);
			}
			else {
				$$word_ref = pop @parts;
				push (@{$tokens_aref}, @parts);
				verbose ("test_corr/split_words", "$correct", __LINE__);
			}
		}
		else { $$word_ref = $correct; }
		return 0;
	}

	my $next;
	my $last_part;
	if( $words_aref->[0] ) { $last_part = $words_aref->[0];}
	elsif ($next_words[0]) { $last_part = $next_words[0]; $next=1; }
	else { return 0; }
	while ($i <= $size) {

		# Remove the punctuation at the end of the expression.
		(my $last_part_2 = $last_part) =~ s/([^\w]*)$//;
		my $end_punct = $1;

		# If the expressions contains punctuation in the middle, return.
		return if ($last_part_2 =~ /[^\w\s\d\.\-]/);

		# Test if the formed multiword expression exists in the
		# idiom list. Test also lower case version.
		my $idiom = $$word_ref . " " . $last_part_2;

		verbose ("test_corr", $idiom, __LINE__);

		my $ucidiom = ucfirst($$word_ref) . " " . ucfirst($last_part_2);
		if ($corrections{$idiom} || $corrections{lc($idiom)} || $corrections{($ucidiom)}) {
			my $correct = $corrections{$idiom};
			verbose ("test_corr/correction", "$correct", __LINE__);
			CHECK_IDIOM : {
				if ( $idioms{$correct}) {
					$$word_ref = $correct;
					$$word_ref .= $end_punct;
					verbose ("test_corr/idiom", "$correct", __LINE__);
					last CHECK_IDIOM
					}
				my @parts = split (/ /o, $correct);
				if (scalar @parts > 1) {
					$$word_ref = pop @parts;
					$$word_ref .= $end_punct;
					push (@{$tokens_aref}, @parts);
					verbose ("test_corr/split_words", "$correct", __LINE__);
				}
			}
			# Remove the parts of the multiword expression from
			# the word array.
			if($next) { splice (@next_words, 0, $i+1); }
			else { splice (@{$words_aref}, 0, $i+1); }

			return 1;
		}
		$i++;
		if($words_aref->[$i]) { 
			$last_part = $last_part . " " . $words_aref->[$i];
			$last_part =~ s/\s+/ /g;
		}
		elsif(! $next && $next_words[0]) { 
			$last_part = $last_part . " " . $words_aref->[0];
			$next=1;
		}
		else { return 0; }
	}
}


# If the word starts an multiword expression, it is replaced
# with the expression. The other parts are
# removed from the words array.

sub test_idiom {
	my ($word_ref, $words_aref, $size) = @_;

	# Test for multiword expressions by growing the token
	# one word at a time
	my $next=0;
	my $i=0;
	my $last_part;
	if( $words_aref->[0] ) { $last_part = $words_aref->[0];}
	elsif ($next_words[0]) { $last_part = $next_words[0]; $next=1; }
	else { return 0; }
	while ($i <= $size) {

		# Remove the punctuation at the end of the expression.
		(my $last_part_2 = $last_part) =~ s/[^\w]*$//;

		# If the expressions contains punctuation in the middle, return.
		return if ($last_part_2 =~ /[^\w\s\d\.\-]/);

		# Test if the formed multiword expression exists in the
		# idiom list. Test also lower case version.
		my $idiom = $$word_ref . " " . $last_part_2;

		verbose ("test_idiom", $idiom, __LINE__);

		my $ucidiom = ucfirst($$word_ref) . " " . ucfirst($last_part_2);
		if ($idioms{$idiom} || $idioms{lc($idiom)} || $idioms{($ucidiom)}) {
			for (my $j=0; $j <= $i; $j++) {
				# Construct the new multiword processing unit.
				# Remove the parts of the multiword expression from
				# the word array.
				if($next) { 
					$$word_ref = $$word_ref . " " . $next_words[0];
					shift @next_words;
				}
				else {
					$$word_ref = $$word_ref . " " . $words_aref->[0]; 
					shift @{$words_aref}; 
				}
			}
			return 1;
		}
		$i++;
		if($words_aref->[$i]) { 
			$last_part = $last_part . " " . $words_aref->[$i];
			$last_part =~ s/\s+/ /g;
		}
		elsif(! $next && $next_words[0]) { 
			$last_part = $last_part . " " . $words_aref->[0];
			$next=1;
		}
		else { return 0; }
	}
}

sub process_numeral {
	my ($word, $words_aref, $tokens_aref) = @_;

	verbose ("process_numeral", $word, __LINE__);

	if ($corr ) { if ($corr_short{$word}) { test_corr(\$word, $words_aref, $tokens_aref); } }

	# Search for numeral expressions with spaces.

  COMBINE: {
	  # Consider date expressions first.
	  # at the moment covers years: 1984-2000, 1984- 2000 etc.
	  if ($word =~ /^\d{4}\p{Pd}?$/o) {
		  while ($words_aref->[0] =~ /^(?:\p{Pd}|\p{Pd}?(?:\d{4}|\d{2}))\.?$/o) {
			  if ($word =~ /\-/ || $words_aref->[0] =~ /\-/) { 
				  $word = $word . " " . $words_aref->[0];
				  verbose ("process_numeral/combine date", $word, __LINE__);
				  shift @{$words_aref};
			  }
			  else { last COMBINE; }
		  }
		  last COMBINE;
	  }
	  
	  # Combine punctuation with numeral if followed by other numeral.
	  # cases like 123- 456 and 123 -456 and 123 456 and 123 - 456
	  while (($word =~ /^[\d$NUM_PUNCT\- ]+$/o) && ($words_aref->[0] =~ /^[\d$NUM_PUNCT\- ]+\.?$/o)) {
		  $word = $word . " " . $words_aref->[0];
		  verbose ("process_numeral/combine", $word, __LINE__);
		  shift @{$words_aref};
	  }

  } # end of COMBINE

	# Combine percent sign to the numeral when separate.
	# covers cases like: 50 %
	if (($word =~ /\d$/) && ($words_aref->[0] =~ /^\%/)) {
		$word = $word . " " . $words_aref->[0];
		verbose ("process_numeral/combine", $word, __LINE__);
		shift @{$words_aref};
	}
	
	
	# Clean first the end of the token, where punctuation follows
	# the numeral or an ordinal and does not belong to the expression.
	# cases like: 123! and 123.), 123). 10,-. 
    # problem: 123.? and 123 is an ordinal.
	my $end_punct;
	if ($word =~ s/([$SINGLE_PUNCT:]+\.?)$//o){
		$end_punct = $1;
	}
	if ($word =~ /([$SINGLE_PUNCT:\p{Pd}\%]+\.?)$/o){
		$word =~ s/(\.?)$//;
		$end_punct = $1;
	}
	
	verbose ("process_numeral", $word, __LINE__);

	my $end_word;

	SPLIT_NUMERAL : {
		# Check if the word is an inflected numeral. 12s, etc.
		if  ( $word =~ /^(\d+)([\:\'\-]?)([\pL]+)/o ) {

			verbose ("process_numeral/inflected", $word, __LINE__);

			if ( $num{$3} ) { last SPLIT_NUMERAL; }
			if (! $2 ) { 
				push (@$tokens_aref, $1);
				process_word ($3, $words_aref, $tokens_aref);
				return;
			}
			last SPLIT_NUMERAL;
		}
		
		# Check if there is an abbreviation or a word attached to
		# numeral. E.g. 6.b. ...ovdal. This introduces problems with some
		# mispellings with headings, like 1.6.Vuonain 
		if ($word =~ /\.([^\W\d]+\.?)$/ && $word !~ /$CONTAIN_PUNCT/o) { 
			$word =~ s/([^\W\d]+\.?)$//;
			verbose ("process_numeral/end_word", $end_word, __LINE__);
			process_numeral($word, $words_aref, $tokens_aref);
			$end_word = $1;
		}
	} # end of SPLIT_NUMERAL
	
	verbose ("process_numeral", $word, __LINE__);
	my $rest_punct;

	NUM_TEST: {

    # Check for ending dot, it is a separate token if 
	# the following word starts with capital letter.
	# If there is an abbreviation with numeral, don't do checking.
	# Otherwise the dot belongs to the expression.
		
		# Process first the abbreviation or word 
		# that is attached to the numeral
		if ($end_word) {
			verbose ("process_numeral/test_abbr", $word, __LINE__);
			my $abbr = $end_word;
			if (( $abbr =~ s/\.$//)  && ($abbrs{$abbr} || $abbrs{lc($abbr)})) {
				test_abbr($end_word, $words_aref->[0], $tokens_aref);
				last NUM_TEST;
			}
			else { 
				process_word ($end_word, $words_aref, $tokens_aref);
				last NUM_TEST;
			}
		}
		
	  DOT_TEST: {
		  last DOT_TEST if ($word !~ /\.$/);
		  (my $nopunct = $word) =~ s/\.$//;
		  # If the number contains other than digits or is a year,
		  # Then the ending dot is removed.
		  if($nopunct =~ /[§\d\pP\pL]/ && ($words_aref->[0] !~ /^[\p{Ll}\d]/o)){
			  $word = $nopunct;
		  }
		  # Otherwise dot is considered to be an ordinal.
		  elsif ($word =~ /^\d{1,3}\.$/ ) {
			  if ($words_aref->[0] !~ /^[\p{Lu}]/o) {
				  last DOT_TEST;
			  }
		  }
		  else { last DOT_TEST; }
		  $end_punct = "." . $end_punct;
		  
		  verbose ("process_numeral/ending dot", $word, __LINE__);
		  
		  # Clean the rest of the token:
		  # cases like 123). where dot is preceded by punctuation.
		  if ($word =~ s/([$SINGLE_PUNCT:]+)$//o) {
			  $rest_punct =  $1;
		  }
	  } # end of DOT_TEST

		verbose ("process_numeral", $word, __LINE__);
		
		# Push everything to the tokens array.
		push (@{$tokens_aref}, $word);
		push (@{$tokens_aref}, $end_word);
		
	} #end of NUM_TEST
	
	push (@{$tokens_aref}, split(//, $rest_punct)); 
	push (@{$tokens_aref}, split(//, $end_punct)); 
}

sub read_corr {
	my ($corr_href, $corr_short_href) = @_;

	local $/="\n";

	open CORR, "< $corr" or die "Cant open the file $corr: $!\n";

	while (<CORR>) {
		chomp;
		
		next if (/^!/);
		next if (/^\s*$/);
		next if (/^\#/);
		s/\s$//;
		
		my ($error, $correct) = split(/\t+/);
		if ($error && $correct) {
			$error =~ s/\s$//;
			$$corr_href{$error} = $correct;
			my ($first, $last) = split(/ /, $error, 2);
			$$corr_short_href{$first} = 1;
		}
		else { print STDERR "preprocess warning: Line not included to typos: $_\n"; }
	}
#	for my $key (keys %$corr_href) {
#		print "$key $$corr_href{$key}\n";
#	}
}


sub read_abbr {
	my ($abbr_href, $idiom_href, $idiom_short_href, $num_href) = @_;
	
	local $/="\n";
    # The filename may contain a tilde ~
    # Expand the filename manually
	$abbr_file =~ s{^~([^/])*} {
		$1
			? (getpwnam($1))[7]
			: ($ENV{HOME} || (getpwuid($>))[7]
			   )
		}ex;

	open LEX, "< $abbr_file" or die "Cant open the file: $!\n";

	my $current;
	while (<LEX>) {
		chomp;		
		last if (/^LEXICON IDIOM/);
		if (/^LEXICON\s+(.*?)\s*$/) {
			$current = $1;
			next;
		}
		$$abbr_href{$_} = $current;
	}
	while (<LEX>) {
		chomp;
		last if (/^LEXICON NUM/);
		my ($first, $last) = split(/ /, $_, 2);
		$$idiom_href{$_} = 1;
		$$idiom_short_href{$first} = 1;
	}

	while (<LEX>) {
		next if /^\s*$/;
		chomp;
		$$num_href{$_} = 1;
	}

	close LEX;	

#	for my $key (keys %$idiom_short_href) {
#		print "$key $$idiom_short_href{$key}\n";
#	}
}

sub print_usage {
	print "Usage: preprocess [OPTIONS] --abbr=<file_name> FILES\n";
	print "Split text in FILE into sentences and words.\n";
	print "Options\n";
	print "--hyph           show the hyphenation points, i.e. change the <hyph> tags\n";
    print "                 to hyphens. The default is to just remove the <hyph> tags.\n";
    print "--use-hyph-tags  leave the <hyph> tags untouched\n";
    print "--break=<string> use <string> instead of . as sentence delimiter. \n";
    print "--connect=<list> comma separated list of words which connect expressions\n";
    print "                 like fisk- og vilthandelen \n";
    print "--help           prints the help text and exit.\n";
    print " --v             prints information of the execution of the script\n";
	print " --corr=<file>   list of common typos and their corrections (e.g. typos.txt)\n";
	print " --xml           leave the xml-tag untouched as their own tokens\n";

}



