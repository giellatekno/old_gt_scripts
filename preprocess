#!/usr/bin/perl
use strict;
use open ':locale';

# preprocess
# Perl-script for text preprocessing 
#  - Cuts text into sentences and sentences into words (tokens).
#  - Reads plain text from STDIN and outputs 
#    a list of words separated by newline.
#
# An abbreviation file may be given as input parameter --abbr, 
# the file has special syntax and the usage is connected 
# to other sámi tools.
# 
# $Id$

# Use the local character class. 
# It means that variable \w contains Latin-1 alphabet.
#use locale;

# permit named arguments
use Getopt::Long;

my @words;
my %abbrs;
my $TRAB="TRAB";
my $ITRAB="ITRAB";
my $TRNUMAB="TRNUMAB";
my $IDIOM="IDIOM";

# Max size of a multi-word expression.
my $MULTIWORD_SIZE = 3;

#  «»‹›“”„‘’‚ ´`'"
my $quotations = "\x{00AB}\x{00BB}\x{2039}\x{203A}\x{201C}\x{201D}\x{201E}\x{2018}\x{2019}\x{201A}\x{00B4}\x{0060}\'\"";
#… and • ¶
my $other = "\x{2026}\x{2022}\x{00B6}";
my $parentheses = quotemeta("|{}[]()");
my $general_punct = quotemeta("$.*?!,;:.%");

# General punctuation, not much used. 
my $PUNCT = $quotations . $parentheses . $general_punct . $other;

# Punctuation marks that are always their own tokens,
# whether word or numeral expression.
# There are characters added to this list depending on if
# the processed string is word or numeral.
my $SINGLE_PUNCT = $quotations . $parentheses . quotemeta("?!,;/\\") . $other;

# Regex for tokens that nevertheless contain punctuation that
# is specified in variable $SINGLE_PUNCT.
my $CONTAIN_PUNCT = 'ja\/dahje|http|:\/\/|km\/h|www|@|\.jpg|\.doc|\.pdf|\.html|\.txt';

# Punctuation that connects two or more numerals 
# into one numeral expressions.
my $NUM_PUNCT=quotemeta("-+*=/");

my $abbr_file;
my $help=0;
my $verbose=0;
my $hyph=0;
my $use_hyph_tag=0;
my $fst;

GetOptions ("abbr=s" => \$abbr_file,
			"fst=s" => \$fst,
			"help" => \$help,
			"v" => \$verbose,
			"hyph" => \$hyph,
			"use-hyph-tag" => \$use_hyph_tag) ;

if ($help) {
	&print_usage;
	exit;
}

my %idioms;
# If the abbreviation file is given,
# read the abbreviations from the file to a hash.
if ($abbr_file) {
	&read_abbr (\%abbrs, \%idioms);
}

sub verbose {
	my ($from, $word, $linenumber) = @_;
	
	if (!$verbose) {
		return;
	}
	
	print STDERR "[$from:$linenumber] $word\n";
}

# read one paragraph at the time.
# the paragraph ends with two subsequent newlines.
$/ = "";

while (<>) {
	chomp;

	# Process the <hyph> tag.
	if (! $use_hyph_tag) {
		if ($hyph) { s/\<hyph\>/-/g; }
		else { s/\<hyph\>//g; }
	}

	# The newline is removed from the possible remaining hyphenation points.
	s/\w\-\n/\-/g;

	# split the sentence by space.
    my @words = split;

	while (@words) {
		
		my $word = shift @words;

		# An array for storing the tokens, each token in its own slot.
		my @tokens;
		
		# Move forward if the word is nothing special. 
        # This is for making preprocessing faster.
		if ($word =~ /^[^\W\d\s\n]*$/) {
			if (! $idioms{($word)} && ! $idioms{lcfirst($word)}) {
				print "$word\n";
				next;
			}
		}

		# store punctuation from the front of the expression
		# to the tokens array. (todo: check variable $CONTAIN_PUNCT)
		if ($word =~ s/^([$SINGLE_PUNCT]+)//o) {
			push (@tokens, split(//, $1));
		}
		# Examine the type of the string. If the expression contains
		# alphabetical characters optionally preceded by one non-alphabetic
		# character, it is a word.
		if ($word =~ /^[\W]?[^\W\d]+/) {
		    verbose("if word", $word , __LINE__);
			process_word ($word, \@words, \@tokens);
		}
		# Otherwise it is processed like numeral.
		else {
			process_numeral ($word, \@words, \@tokens);
		}
		for my $token (@tokens) {
			print "$token\n" unless ($token =~ /^$/);
		}
	}
}


sub process_word {
	my ($word, $words_aref, $tokens_aref) = @_;

	# variable for storing all the punctuation at the end of the word.
	# except dot (for abbreviations) and some other punct. if needed
	my $end_punct;
	# the variable storing dot and the possible some other punct.
	my $rest_punct;

    # Test for multiword expression.
	if ($idioms{$word} || $idioms{lcfirst($word)}) {
		test_idiom(\$word, $words_aref, $MULTIWORD_SIZE);
	}

    my $end_num;
    if ($word =~ /\.(\d+\.?)$/){
        $word =~ s/(\d+\.?)$//;
        $end_num = $1;
        verbose ("process_word/end_num", $end_num, __LINE__);
    }

    # Store the punctuation at the end of the string to a variable
	if ($word =~ s/([+=%:$SINGLE_PUNCT]+)$//o) {
		$end_punct = $1;
		verbose ("process_word/end_punct", $end_punct, __LINE__);
	}

	# Cut the word into tokens if there is punctuation in the middle.
	# e.g. gielddat/guovllut
	# Check for expressions in $CONTAIN_PUNCT -variable.
	if ($word !~ /$CONTAIN_PUNCT/o && (my @parts = split (/([+=%$SINGLE_PUNCT\/])/o, $word))) {
		$word = pop @parts;
		push (@{$tokens_aref}, @parts);

		# Process the last part further, it may start with punctuation
		# that is separate token.
		if ($word =~ s/^([$PUNCT])//o) {
			push (@{$tokens_aref}, $1);
			}
		if (!$word) {
			push (@{$tokens_aref}, split(//, $end_punct));
			return 1;
		}
	}

  TEST: {
	  # If the punctuation at the end contains a sentence delimiter
	  # ? or !, the word ends the sentence in any case, so the word can
	  # be treated as a token.
	  if ($end_punct =~ /[¶\?\!\.]/) {
		  push (@{$tokens_aref}, $word);
		  last TEST;
	  }

	  # The word is checked for abbreviation and sentence boundary.
	  my $abbr = $word;
	  if ($abbr =~ s/\.$//) {
		  if ($abbrs{$abbr}) {
			  test_abbr($word, $words_aref->[0], $tokens_aref);
			  last TEST;
		  }	  
		  # Check for abbreviation with 2-3 capital letters
		  # If followed by a capital letter or number,
		  # There is a sentence boundary. todo: Remove this as irrelevant!!
		  elsif ($abbr =~ /^[[:upper:]1]{2,3}$/ ) {
			  if ($words_aref->[0] !~ /^[[:lower:]]/ ) {
				  push (@{$tokens_aref}, $abbr);
				  push (@{$tokens_aref}, ".");
				  last TEST;
			  }
			  else {
				  push (@{$tokens_aref}, $word); 
				  last TEST;
			  }
		  }
	  }
	  # If the word was not an abbreviation, the rest
	  # of the punctuation is removed and stored as separate tokens.
	  # This operation is for taking the dot out.
	  if ($word =~ s/([$SINGLE_PUNCT\.:]+)$//o) {
		  $rest_punct =  $1;
		  verbose ("process_word/rest_punct", $rest_punct, __LINE__);
		  push (@{$tokens_aref}, $word);
		  push (@{$tokens_aref}, $rest_punct);
		  last TEST;
	  }
	  push (@{$tokens_aref}, $word); 

  } # end of block TEST

	push (@{$tokens_aref}, $end_num); 
	push (@{$tokens_aref}, split(//, $end_punct));
}


sub test_abbr {
	my ($word, $next_word, $tokens_aref) = @_;

	my $abbr = $word;
	if (! ($abbr =~ s/\.$//)) {
		return 0;
	}
	
	# Transitive abbreviations are never followed
	# by sentence boundary.
	if ($abbrs{$abbr} eq $TRAB) {
		push (@{$tokens_aref}, $word);
		return 1;
	}
	# There is CLB after TRNUMAB only for the capital+small combinations
	# and all small-initial strings that consist of more than one letter.
	# For all other strings (one small letter, one or several capital letters) we
	# want no CLB after TRNUMAB.
	elsif ($abbrs{$abbr} eq $TRNUMAB) {
		push (@{$tokens_aref}, $word);
		if ($next_word =~ /^[[:upper:]]?[[:lower:]]{2,}/) {
			push (@{$tokens_aref}, ".");
		}
		return 1;
	}
	# There is a sentence boundary if intransitive abbreviation 
	# is NOT followed by a small alphabetic char.
	elsif ($abbrs{$abbr} eq $ITRAB) {
		push (@{$tokens_aref}, $word);
		if ($next_word !~ /^[[:lower:]]/o) {
			push (@{$tokens_aref}, ".");
		}
		return 1;
	}
	return 0;
}

# If the word starts an multiword expression, it is replaced
# with the expression. The other parts are
# removed from the words array.

sub test_idiom {
	my ($word_ref, $words_aref, $size) = @_;
	

	# Test for multiword expressions by growing the token
	# one word at a time
	my $i=0;
	my $token = $words_aref->[0];
	while ($i < $size && $words_aref->[$i]) {

		# Remove the punctuation at the end of the expression.
		(my $token_2 = $token) =~ s/[^\w]*$//;
		
		# If the expressions contains punctuation in the middle, return.
		return if ($token_2 =~ /\W/);

		# Test if the formed multiword expression exists in the
		# idiom list. Test also lower case version.
		if ($idioms{$$word_ref} eq $token_2 || $idioms{lcfirst($$word_ref)} eq lcfirst($token_2)) {
			for (my $j=0; $j <= $i; $j++) {
				# Construct the new multiword processing unit.
				# Remove the parts of the multiword expression from
				# the word array.
				$$word_ref = $$word_ref . " " . $words_aref->[0];
				shift @{$words_aref};
			}
			return 1;
		}
		my $output ="";
		# If fst is given, the analysator is called for the base form of
		# the multiword expression.
		if ($fst) {
			$output = `echo \"$$word_ref $token_2\" | lookup -flags mbTT -utf8 \"$fst\" 2>/dev/null`;
			if ($output && $output !~ /\?/) {
				my @readings = split (/\n/, $output);
				for my $reading (@readings) {
					my ($form, $analysis) = split(/\t/, $reading, 2);
					$analysis =~ tr/\t//d;
					my ($base, $tags) = split(/\+/, $analysis, 2);
				($$word_ref, $token_2) = split(/ /, $base, 2);
					# Test if the formed multiword expression exists in the
					# idiom list, test also the lower case version.
					if ($idioms{$$word_ref} eq $token_2 || $idioms{lcfirst($$word_ref)} eq lcfirst($token_2)) {
						for (my $j=0; $j <= $i; $j++) {
							# Construct the new multiword processing unit.
							# Remove the parts of the multiword expression from
							# the word array.
							$$word_ref = $$word_ref . " " . $words_aref->[0];
							shift @{$words_aref};
						}
						return 1;
					}
				}
			}
		}
		$i++;
		$token = $token . " " . $words_aref->[$i];
	}
}

sub process_numeral {
	my ($word, $words_aref, $tokens_aref) = @_;

	# Take the three dots out ...voxende
	if ($word =~ /^\.\.\./) {
		push (@$tokens_aref, "...");
		$word =~ s/^\.\.\.//;
		if ($word =~ /\w/) { 
			process_word ($word, $words_aref, $tokens_aref);
			return;
		}
	}		

	# Combine punctuation with numeral if followed by other numeral.
	# cases like 123- 456 and 123 -456 and 123 456 and 123 - 456
	while (($word =~ /^[\d$NUM_PUNCT ]+$/o) && ($words_aref->[0] =~ /^[\d$NUM_PUNCT ]+$/o)) {
		$word = $word . " " . $words_aref->[0];
		shift @{$words_aref};
	}

	# Combine percent sign to the numeral when separate.
	# covers cases like: 50 %
	if (($word =~ /\d$/) && ($words_aref->[0] =~ /^\%/)) {
		$word = $word . " " . $words_aref->[0];
		shift @{$words_aref};
	}
	
	verbose ("process_numeral", $word, __LINE__);
	
	# Clean first the end of the token, where punctuation follows
	# the numeral or an ordinal and does not belong to the expression.
	# cases like: 123! and 123.), 123). 10,-. 
    # problem: 123.? and 123 is an ordinal.
	my $end_punct;
	if ($word =~ s/([$SINGLE_PUNCT:]+\.?)$//o){
		$end_punct = $1;
	}
	if ($word =~ /([$SINGLE_PUNCT:\-\%]+\.?)$/o){
		$word =~ s/(\.?)$//;
		$end_punct = $1;
	}
	
	verbose ("process_numeral", $word, __LINE__);

	# Check if there is an abbreviation or a word attached to
	# numeral. E.g. 6.b. ...ovdal. This introduces problems with some
	# mispellings with headings, like 1.6.Vuonain 
	my $end_word;
	if ($word =~ /\.([^\W\d]+\.?)$/ && $word !~ /$CONTAIN_PUNCT/o) { 
		$word =~ s/([^\W\d]+\.?)$//;
		push (@$tokens_aref, $word);
		$end_word = $1;
	}

	
	verbose ("process_numeral/end_word", $end_word, __LINE__);
	verbose ("process_numeral/abbr", $word, __LINE__);

	my $rest_punct;

	NUM_TEST: {
		
		# Check for ending dot, it is a separate token if 
		# the following word starts with capital letter. Or if there is
		# case ending. If there is an abbreviation with numeral, don't
		# do checking.
		# Otherwise belongs to the expression.
		if ($end_word) {
			my $abbr = $end_word;
			if (( $abbr =~ s/\.$//)  && $abbrs{$abbr}) {
				test_abbr($end_word, $words_aref->[0], $tokens_aref);
				last NUM_TEST;
			}
			else { 
				process_word ($end_word, $words_aref, $tokens_aref);
				last NUM_TEST;
			}
		}
		
		if((($words_aref->[0] !~ /^[[:lower:]\d]/) && ($word =~ s/(\.)$// )) || ($word =~ s/(:\w+)(\.)/$1/)) 
		{
			$end_punct = "." . $end_punct;
			
			verbose ("process_numeral/ending dot", $word, __LINE__);
			
			# Clean the rest of the token:
			# cases like 123). where dot is preceded by punctuation.
			if ($word =~ s/([$SINGLE_PUNCT:]+)$//o) {
				$rest_punct =  $1;
			}
		}
		verbose ("process_numeral", $word, __LINE__);
		
		# Push everything to the tokens array.
		push (@{$tokens_aref}, $word);
		push (@{$tokens_aref}, $end_word);
	
	} #end of NUM_TEST

	push (@{$tokens_aref}, split(//, $rest_punct)); 
	push (@{$tokens_aref}, split(//, $end_punct)); 
}



sub read_abbr {
	my ($abbr_href, $idiom_href) = @_;
	
	local $/="\n";
    # The filename may contain a tilde ~
    # Expand the filename manually
	$abbr_file =~ s{^~([^/])*} {
		$1
			? (getpwnam($1))[7]
			: ($ENV{HOME} || (getpwuid($>))[7]
			   )
		}ex;

	open LEX, "< $abbr_file" or die "Cant open the file: $!\n";

	my $current;
	while (<LEX>) {
		chomp;		
		last if (/^LEXICON IDIOM/);
		if (/^LEXICON (.*)$/) {
			$current = $1;
			next;
		}
		$$abbr_href{$_} = $current;
	}
	while (<LEX>) {
		chomp;
		last if (/^LEXICON IDIOM/);
		my ($first, $last) = split(/ /, $_, 2);
		$$idiom_href{$first} = $last;
	}
	close LEX;	

}

sub print_usage {
	print "Usage: preprocess [OPTIONS] --abbr=<file_name> FILES\n";
	print "Split text in FILE into sentences and words.\n";
	print "Options\n";
	print "--hyph          show the hyphenation points, i.e. change the <hyph> tags\n";
    print "                to hyphens. The default is to just remove the <hyph> tags.\n";
    print "--use-hyph-tags leave the <hyph> tags untouched\n";
    print "--help          prints the help text and exit.\n";
    print " --v            prints information of the execution of the script\n";
	print " --fst=<file>   analysator file (e.g. sme.fst) for recognizing\n";
	print "                multiword expressions.\n";

}




